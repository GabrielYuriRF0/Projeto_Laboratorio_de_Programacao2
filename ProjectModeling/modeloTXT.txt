Person
composes Commentary
---
- cpf:str
- name:str
- skills:str[]
- Comments:Array<Commentary>
- level:float
- function:str
---
+ Person(cpf:str, name:str, skills:str[])
+ Person(cpf:str, name:str)
+ toString():str
+ setName(newName:str):void
+ setSkills(newSkils:str[]):void
+ addCommentary(commentary:Commentary):void
+ showComments():str
+ getCpf():str
+ getName():str
+ getSkills():str[]
+ calculateLevel():int //Override
---

Teacher
extends Person
---
- siape:str
- disciplines:str[]
---
+ Teacher(cpf:str, name:str, siape:str, disciplines:str[], skills:str[])
+ toString():str //Override
---

Student
extends Person
---
- registration:str
- period:int
---
+ Student(cpf:Str, name:str, registration:str, period:int, skills:str[])
+ toString():str //Override
---


Commentary
---
- currentDate:Date
- description:str
- author:str
---
+ Commentary(description:str, author:str)
+ toString():str
---


PersonRepository
aggregates Person
---
- people:Map<String, Person>
---
+ PersonRepository()
+ registerPerson(person:Person):void
+ removePerson(cpf:str):void
+ showPerson(cpf:str):str
+ changeName(cpf:str, newName:str):void
+ changeSkills(cpf:str, newSkills:str[]):void
+ addComments(cpf:str, description:str, author:str):void
+ showComments(cpf:str):str
+ getName(cpf:str):str
+ getPerson(cpf:str):Person
+ getFunction():str
+ defineTeacherFunction(cpf:str, siape:str, disciplines:str[]):void
+ defineStudentFuncion(cpf:str, registration:str, period:int):void
+ removerFunction(cpf:str):void
+ getLevel(cpf:str):int
+ listPeople():str[]
---

PersonService
composes PersonRepository
---
- personRepository: PersonRepository
---
+ PersonService()
+ registerPerson(person:Person):void
+ removePerson(cpf:str):void
+ showPerson(cpf:str):str
+ changeName(cpf:str, newName:str):void
+ changeSkills(cpf:str, newSkills:str[]):void
+ addComments(cpf:str, description:str, author:str):void
+ showComments(cpf:str):str
+ getName(cpf:str):str
+ getPerson(cpf:str):Person

+ defineTeacherFunction(cpf:str, siape:str, disciplines:str[]):void
+ defineStudentFuncion(cpf:str, registration:str, period:int):void
+ removerFunction(cpf:str):void
+ getLevel(cpf:str):int
+ listPeople():str[]
---


PersonController
composes PersonService
association PersonValidator
---
- personService: PersonService
---
+ PersonController(personService: PersonService)
+ registerPerson(cpf:str, name:str, skills:str[]):void

+ registerTeacher(cpf:str, name:str, siape:str, disciplines:str[], skills:str[]):void

+ registerStudent(cpf:str, name:str, registration:str, period:int, skills:str[]):void

+ defineTeacherFunction(cpf:str, siape:str, disciplines:str[]):void
+ defineStudentFuncion(cpf:str, registration:str, period:int):void
+ removerFunction(cpf:str):void
+ getLevel(cpf:str):int
+ listPeople():str[]
+ removePerson(cpf:str):void
+ showPerson(cpf:str):str
+ changeName(cpf:str, newName:str):void
+ changeSkills(cpf:str, newSkills:str[]):void
+ addComments(cpf:str, description:str, author:str):void
+ showComments(cpf:str):str
+ getName(cpf:str):str
+ getPerson(cpf:str):Person

---

Activity
composes TaskRepository
---
- name:str
- description:str
- cpf:str
- responsableName:str
- status:str
- id:str
---
+ Activity(name:str, description:str, cpf:str) // Utilizar O generateID no repositório no método de criar atividade
+ generateId(activitys:int):void
+ concludeActivity():void
+ disableActivity():void
+ reopenActivity():void
+ toString():str
+ changeDescription(newDescription:str):void
+ changeResponsable(newCpf:str):void
+ getResponsableName():str
+ getId(): str
---

ActivityRepository
aggregates Activity
---
- activitys: Map<String, Activity>
---
+ ActivityRepository()
+ registerActivity(activity:Activity):str
+ concludeActivity(idActivity:str):void
+ disableActivity(idActivity:str):void
+ reopenActivity(idActivity:str):void
+ showActivity(idActivity:str):str
+ changeDescription(idActivity:str, newDescription:Str):void
+ changeResponsable(idActivity:str, cpf:Str):void
+ getResponsableName(idActivity:str):str
+ getActivity(idActivity:str):Activity
---

ActivityService
composes ActivityRepository
composes PersonService
---
- activityRepository: ActivityRepository
- personService: PersonService
---
+ ActivityService(personService:PersonService)
+ registerActivity(activity:Activity):void
+ concludeActivity(idActivity:str):void
+ disableActivity(idActivity:str):void
+ reopenActivity(idActivity:str):void
+ showActivity(idActivity:str):str
+ changeDescription(idActivity:str, newDescription:Str):void
+ changeResponsable(idActivity:str, cpf:Str):void
+ getResponsableName(idActivity:str):str
+ getActivity(idActivity:str):Activity
---


ActivityController
composes ActivityService
---
- activityService: ActivityService
- personService: PersonService
---
+ ActivityController(activityService: ActivityService)
+ registerActivity(name:str, description:str, cpf:str):void
+ concludeActivity(idActivity:str):void
+ disableActivity(idActivity:str):void
+ reopenActivity(idActivity:str):void
+ showActivity(idActivity:str):str
+ changeDescription(idActivity:str, newDescription:Str):void
+ changeResponsable(idActivity:str, cpf:Str):void
+ getResponsableName(idActivity:str):str
+ getActivity(idActivity:str):Activity
---

Task
---
- name:str
- time:int
- skills:str[]
- status:str
- team:Map<str,str>
---
+ Task(name:str, skills:str[])
+ setName(newName:str):void
+ setSkills(newSkills:str[]):void
+ addTime(hours:int):void
+ removeTime(hours:int):void
+ concludeTask():void
+ removeTask():void
+ toString():str
+ addPersonTask(cpf:str):void
+ removePersonTask(cpf:str):void
+ getTime():int
---

TaskRepository
aggregates Task
---
- tasks:Map<str, Task>
---
+ TaskRepository()
+ RegisterTask(task:Task):str
+ setName(idTask:str, newName:str):void
+ setSkills(idTask:str, newSkills:str[]):void
+ addHours(idTask:str, hours:int):void
+ removeHours(idTask:str, hours:int):void
+ concludeTask(idTask:str):void
+ removeTask(idTask:str):void
+ showTask(idTask:str):void
+ addPersonTask(cpf:str,idTask:str):void
+ removerPersonTask(cpf:str, idTask:str):void
+ getTask(idTask:str):Task
---

TaskService
association ActivityService
association PersonService
---
- activityService: ActivityService
- personService: PersonService
---
+ TaskService(activityService:ActivityService, personService:PersonService)
+ RegisterTask(task:Task):str
+ setName(idTask:str, newName:str):void
+ setSkills(idTask:str, newSkills:str[]):void
+ addHours(idTask:str, hours:int):void
+ removeHours(idTask:str, hours:int):void
+ concludeTask(idTask:str):void
+ removeTask(idTask:str):void
+ showTask(idTask:str):void
+ addPersonTask(cpf:str,idTask:str):void
+ removerPersonTask(cpf:str, idTask:str):void
+ getTask(idTask:str):Task
---

TaskController
composes TaskService
---
- taskService:TaskService
---
+ TaskController(taskService:TaskService)
+ RegisterTask(idActivity:str, name:str, skills:str[]):str
+ setName(idTask:str, newName:str):void
+ setSkills(idTask:str, newSkills:str[]):void
+ addHours(idTask:str, hours:int):void
+ removeHours(idTask:str, hours:int):void
+ concludeTask(idTask:str):void
+ removeTask(idTask:str):void
+ showTask(idTask:str):void
+ addPersonTask(cpf:str,idTask:str):void
+ removerPersonTask(cpf:str, idTask:str):void
+ getTask(idTask:str):Task
---

Validator
//Abstract class
---
---
+ Validator()
+ validateGeneralString():void //IllegalArgumentException
+ generalValidateStringArray(array:str[]):void
---

PersonValidator
extends Validator
---
---
+ PersonValidator()
+ generalValidate(cpf:str, name:str, skills:str):void
+ cpfValidator(cpf:str):void
---

Facade
composes PersonController
composes ActivityController
composes TaskController
composes SearchController
composes ManageTaskController
---
- personController:PersonController
- activityController:ActivityController
- taskController:TaskController
- searchController: SearchController
- manageTaskController:ManageTaskController
---
+ Facade()

//Referente a Person
+ registerPerson(cpf:str, name:str, skills:str[]):void
+ removePerson(cpf:str):void
+ showPerson(cpf:str):str
+ setPersonName(cpf:str, newName:str):void
+ setPersonSkills(cpf:str, newSkills:str[]):void
+ registerComments(cpf:str, description:str, authorCpf:str):void
+ showComments(cpf:str):str
+ getPersonName(cpf:str):str
+ getPerson(cpf:str):Person

+ registerTeacher(cpf:str, name:str, siape:str, disciplines:str[], skills:str[]):void

+ registerStudent(cpf:str, name:str, registration:str, period:int, skills:str[]):void

+ defineTeacherFunction(cpf:str, siape:str, disciplines:str[]):void
+ defineStudentFuncion(cpf:str, registration:str, period:int):void
+ removerFunction(cpf:str):void
+ getLevel(cpf:str):int
+ listPeople():str[]

//Referente a Activity
+ registerActivity(name:str, description:str, cpf:str):void
+ concludeActivity(idActivity:str):void
+ disableActivity(idActivity:str):void
+ reopenActivity(idActivity:str):void
+ showActivity(idActivity:str):str
+ changeDescription(idActivity:str, newDescription:Str):void
+ changeResponsable(idActivity:str, cpf:Str):void
+ getResponsableName(idActivity:str):str
+ getActivity(idActivity:str):Activity

//Referente a Task
+ RegisterTask(idActivity:str, name:str, skills:str[]):str
+ setName(idTask:str, newName:str):void
+ setSkills(idTask:str, newSkills:str[]):void
+ addHours(idTask:str, hours:int):void
+ removeHours(idTask:str, hours:int):void
+ concludeTask(idTask:str):void
+ removeTask(idTask:str):void
+ showTask(idTask:str):void
+ addPersonTask(cpf:str,idTask:str):void
+ removerPersonTask(cpf:str, idTask:str):void
+ getTask(idTask:str):Task

//Referente a ManageTask
+ registerManageTask(idActivity:str, name:str, skills:str[], idTasks:str[]):str
+ addInManageTask(idManageTask:str, idTask:str):void
+ removeTask(idManageTask:str, idTask:str):void
+ countTasksInManage(idManageTask:str):int


//Referente a Search
+ searchPerson(terms:str):str[]
+ searchActivity(terms:str):str[]
+ searchTask(name:str):str[] // Retornar toString de cada tarefa com esse nome
+ searchTask(idActivity:str, name:str):str[]
+ sugestTasks(cpf:str):str[]
+ recentSearch(searchNumbers:int):str[] // Retornar conteúdo das buscas
+ showSearchHistoric(SearchId:int):str[] // Retornar tipo e conteúdo das buscas

---

SearchController
composes SearchService
---
- searchService:SearchService
---
+ SearchController(searchService:SearchService)
+ searchPerson(terms:str):str[]
+ searchActivity(terms:str):str[]
+ searchTask(name:str):str[] // Retornar toString de cada tarefa com esse nome
+ searchTask(idActivity:str, name:str):str[]
+ sugestTasks(cpf:str):str[]
+ recentSearch(searchNumbers:int):str[] // Retornar conteúdo das buscas
+ showSearchHistoric(SearchId:int):str[] // Retornar tipo e conteúdo das buscas
---

SearchService
composes SearchRepository
association PersonService
association ActivityService
association TaskService
---
- searchRepository: SearchRepository
- personService: PersonService
- activityService: ActivityService
- taskService: TaskService
---
+ SearchService(searchRepository: SearchRepository,  personService: PersonService,activityService: ActivityService,taskService: TaskService)

// A cada busca, criar um objeto do tipo busca e armazenar no histórico

+ searchPerson(terms:str[]):str[]
+ searchActivity(terms:str[]):str[]
+ searchTask(name:str):str[] // Retornar toString de cada tarefa com esse nome
+ searchTask(idActivity:str, name:str):str[]
+ sugestTasks(cpf:str):str[]
+ recentSearch(searchNumbers:int):str[] // Retornar conteúdo das buscas
+ showSearchHistoric(SearchId:int):str[] // Retornar tipo e conteúdo das buscas
---

Search
---
- type:str
- content:str[]
---
+ Search(type:str, content:str[])
+ getTypeandContent():str[]
+ getContent():str[]
---

SearchRepository
aggregates Search
---
- searchs:ArrayList<Search>
---
+ SearchRepository()
+ registerSearch(search:Search):void
+ recentSearch(searchNumbers:int):str[] // Retornar conteúdo das buscas
+ showSearchHistoric(SearchId:int):str[] // Retornar tipo e conteúdo das buscas
---

ManageTask
aggregates Task
---
- idManageTask:str
- name:str
- status:str
- hours:int
- skills: HashSet<String>
- team: Map<String, String> //Cpf e nome
- tasks: Map<String, Task> //idtask e task
---
+ ManageTask(name:str, skills:str[])
+ registerTask(task:Task):void
+ removeTask(idTask:str):void
+ registerHours(newHours:int):void
+ removerHours(newHours:int):void
+ toString():str
+ setStatus(newStatus:str):void
+ setTeam():void //Concatena acessando o mapa de tasks
+ countTasksInManage(idManageTask:str):int
---

ManageTaskRepository
aggregates ManageTask
---
- manageTasks: Map<String, ManageTask>
---
+ ManageTaskRepository()
+ registerManageTask(manageTask:ManageTask):str
+ addInManageTask(idManageTask:str, task:Task):void
+ removeTask(idManageTask:str, idTask:str):void
+ countTasksInManage(idManageTask:str):int
---

ManageService
composes ActivityService
---
- activityService:ActivityService
---
+ ManageService(activityService:ActivityService)
+ registerManageTask(idActivity:str, name:str, skills:str[], idTasks:str[]):str
+ addInManageTask(idManageTask:str, idTask:str):void
+ removeTask(idManageTask:str, idTask:str):void
+ countTasksInManage(idManageTask:str):int
---

ManageController
composes ManageService
---
- manageService:ManageService
---
+ ManageController(manageService:ManageService)
+ registerManageTask(idActivity:str, name:str, skills:str[], idTasks:str[]):str
+ addInManageTask(idManageTask:str, idTask:str):void
+ removeTask(idManageTask:str, idTask:str):void
+ countTasksInManage(idManageTask:str):int
---















